#ifndef _GX_INTERFACE_H_
#define _GX_INTERFACE_H_

//Function pointer typedef for exported interface creation
//Such a function is generated by the REGISTER_INTERFACE() macro
typedef void* (*InstantiateInterfacePtr)(void**);


//This class holds all interface definitions in a plugin
//The list is statically created at compiletime
//The list head is "knownInterfaces"
//For each new plugin, the DEFINE_PLUGIN() Makro needs to be executed in the cpp file
class InterfaceRegistration
{
public:
    InterfaceRegistration(InstantiateInterfacePtr instantiateProc, const char* name, const char* argumentSignature)
        : name(name),
        argumentSignature(argumentSignature)
    {
        instantiate = instantiateProc;

        //Prepend to static linked list
        next = knownInterfaces;
        knownInterfaces = this;
    }

    InstantiateInterfacePtr instantiate;
    const char* name;
    const char* argumentSignature;

    //linked-list pointer
    InterfaceRegistration* next;

    //static list of all registered interfaces
    static InterfaceRegistration* knownInterfaces;
};


#define CONCAT_IMPL( x, y ) x##y
#define MACRO_CONCAT( x, y ) CONCAT_IMPL( x, y )

//Register a new interface
#define REGISTER_INTERFACE(classname, interfacename, name) REGISTER_INTERFACE_IMPL(classname, interfacename, name, __COUNTER__)
#define REGISTER_INTERFACE_IMPL(classname, interfacename, name, counterval) \
    static void* MACRO_CONCAT(_GX_intinstantiate##classname##interfacename, counterval)(void** args) { return new classname(); } \
    static InterfaceRegistration MACRO_CONCAT(_GX_intreg_##classname##interfacename, counterval)(MACRO_CONCAT(_GX_intinstantiate##classname##interfacename, counterval), name, "");

//Register a new interface with a constructor with one argument of given type
#define REGISTER_INTERFACE_ARG1(classname, interfacename, name, argtype1) REGISTER_INTERFACE_ARG1_IMPL(classname, interfacename, name, argtype1, __COUNTER__)
#define REGISTER_INTERFACE_ARG1_IMPL(classname, interfacename, name, argtype1, counterval) \
    static void* MACRO_CONCAT(_GX_intinstantiate##classname##interfacename, counterval)(void** args) { return new classname( (*reinterpret_cast<##argtype1(*)>(args[0])) ); } \
    static InterfaceRegistration MACRO_CONCAT(_GX_intreg_##classname##interfacename, counterval)(MACRO_CONCAT(_GX_intinstantiate##classname##interfacename, counterval), name, #argtype1);

//Register a new interface with a constructor with two arguments of given types
#define REGISTER_INTERFACE_ARG2(classname, interfacename, name, argtype1, argtype2) REGISTER_INTERFACE_ARG2_IMPL(classname, interfacename, name, argtype1, argtype2, __COUNTER__)
#define REGISTER_INTERFACE_ARG2_IMPL(classname, interfacename, name, argtype1, argtype2, counterval) \
    static void* MACRO_CONCAT(_GX_intinstantiate##classname##interfacename, counterval)(void** args) { return new classname( (*reinterpret_cast<##argtype1(*)>(args[0])), (*reinterpret_cast<##argtype2(*)>(args[1])) ); } \
    static InterfaceRegistration MACRO_CONCAT(_GX_intreg_##classname##interfacename, counterval)(MACRO_CONCAT(_GX_intinstantiate##classname##interfacename, counterval), name, #argtype1 #argtype2);

//Register a new interface with a constructor with three arguments of given types
#define REGISTER_INTERFACE_ARG3(classname, interfacename, name, argtype1, argtype2, argtype3) REGISTER_INTERFACE_ARG3_IMPL(classname, interfacename, name, argtype1, argtype2, argtype3, __COUNTER__)
#define REGISTER_INTERFACE_ARG3_IMPL(classname, interfacename, name, argtype1, argtype2, argtype3, counterval) \
    static void* MACRO_CONCAT(_GX_intinstantiate##classname##interfacename, counterval)(void** args) { return new classname( (*reinterpret_cast<##argtype1(*)>(args[0])), (*reinterpret_cast<##argtype2(*)>(args[1])), (*reinterpret_cast<##argtype3(*)>(args[2])) ); } \
    static InterfaceRegistration MACRO_CONCAT(_GX_intreg_##classname##interfacename, counterval)(MACRO_CONCAT(_GX_intinstantiate##classname##interfacename, counterval), name, #argtype1 #argtype2 #argtype3);

//Register a new interface with a constructor with four arguments of given types
#define REGISTER_INTERFACE_ARG4(classname, interfacename, name, argtype1, argtype2, argtype3, argtype4) REGISTER_INTERFACE_ARG4_IMPL(classname, interfacename, name, argtype1, argtype2, argtype3, argtype4, __COUNTER__)
#define REGISTER_INTERFACE_ARG4_IMPL(classname, interfacename, name, argtype1, argtype2, argtype3, argtype4, counterval) \
    static void* MACRO_CONCAT(_GX_intinstantiate##classname##interfacename, counterval)(void** args) { return new classname( (*reinterpret_cast<##argtype1(*)>(args[0])), (*reinterpret_cast<##argtype2(*)>(args[1])), (*reinterpret_cast<##argtype3(*)>(args[2])), (*reinterpret_cast<##argtype4(*)>(args[3])) ); } \
    static InterfaceRegistration MACRO_CONCAT(_GX_intreg_##classname##interfacename, counterval)(MACRO_CONCAT(_GX_intinstantiate##classname##interfacename, counterval), name, #argtype1 #argtype2 #argtype3 #argtype4);

//Register a new interface with a constructor with five arguments of given types
#define REGISTER_INTERFACE_ARG5(classname, interfacename, name, argtype1, argtype2, argtype3, argtype4, argtype5) REGISTER_INTERFACE_ARG5_IMPL(classname, interfacename, name, argtype1, argtype2, argtype3, argtype4, argtype5, __COUNTER__)
#define REGISTER_INTERFACE_ARG5_IMPL(classname, interfacename, name, argtype1, argtype2, argtype3, argtype4, argtype5, counterval) \
    static void* MACRO_CONCAT(_GX_intinstantiate##classname##interfacename, counterval)(void** args) { return new classname( (*reinterpret_cast<##argtype1(*)>(args[0])), (*reinterpret_cast<##argtype2(*)>(args[1])), (*reinterpret_cast<##argtype3(*)>(args[2])), (*reinterpret_cast<##argtype4(*)>(args[3])), (*reinterpret_cast<##argtype5(*)>(args[4])) ); } \
    static InterfaceRegistration MACRO_CONCAT(_GX_intreg_##classname##interfacename, counterval)(MACRO_CONCAT(_GX_intinstantiate##classname##interfacename, counterval), name, #argtype1 #argtype2 #argtype3 #argtype4 #argtype5);

#endif
